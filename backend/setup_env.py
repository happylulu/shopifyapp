#!/usr/bin/env python3
"""
Environment Setup Helper for FastAPI Backend

This script helps set up the environment variables needed for the
multi-tenant authentication system to work properly.
"""

import os
from pathlib import Path


def create_env_file():
    """Create a .env file with the required environment variables."""
    
    env_path = Path(__file__).parent / ".env"
    
    if env_path.exists():
        print(f"⚠️  .env file already exists at {env_path}")
        response = input("Do you want to overwrite it? (y/N): ")
        if response.lower() != 'y':
            print("❌ Aborted")
            return
    
    print("🔧 Setting up environment variables for FastAPI backend...")
    print()
    
    # Get database URL
    print("📊 Database Configuration:")
    print("The FastAPI backend needs to connect to the same PostgreSQL database")
    print("that your Next.js frontend uses for session storage.")
    print()
    
    db_url = input("Enter your DATABASE_URL (postgresql+asyncpg://user:pass@host/db): ").strip()
    if not db_url:
        print("⚠️  Using default PostgreSQL URL for development")
        db_url = "postgresql+asyncpg://postgres:password@localhost:5432/shopify_loyalty"
    
    # Get Shopify credentials
    print("\n🛍️  Shopify App Configuration:")
    print("These should match the credentials in your Next.js app.")
    print()
    
    api_key = input("Enter your SHOPIFY_API_KEY: ").strip()
    if not api_key:
        api_key = "your_shopify_api_key_here"
    
    api_secret = input("Enter your SHOPIFY_API_SECRET: ").strip()
    if not api_secret:
        api_secret = "your_shopify_api_secret_here"
    
    # Optional OpenAI key
    print("\n🤖 OpenAI Configuration (optional):")
    openai_key = input("Enter your OPENAI_API_KEY (or press Enter to skip): ").strip()
    if not openai_key:
        openai_key = "your_openai_api_key_here"
    
    # Create .env content
    env_content = f"""# FastAPI Backend Environment Configuration
# Generated by setup_env.py

# Database Configuration (shared with Next.js)
DATABASE_URL={db_url}

# Shopify App Configuration
SHOPIFY_API_KEY={api_key}
SHOPIFY_API_SECRET={api_secret}

# OpenAI Configuration (optional)
OPENAI_API_KEY={openai_key}

# Server Configuration
PORT=8000
HOST=0.0.0.0

# Note: No SHOPIFY_ACCESS_TOKEN needed for multi-tenant apps
# Access tokens are retrieved per-shop from session storage
"""
    
    # Write .env file
    with open(env_path, 'w') as f:
        f.write(env_content)
    
    print(f"\n✅ Created .env file at {env_path}")
    print("\n📋 Next steps:")
    print("1. Make sure your PostgreSQL database is running")
    print("2. Ensure your Next.js app is storing sessions in the same database")
    print("3. Run: python test_auth.py")
    print("4. Start the FastAPI server: python -m uvicorn main:app --reload")


def check_existing_env():
    """Check if environment variables are already set."""
    
    print("🔍 Checking existing environment configuration...")
    
    required_vars = [
        "DATABASE_URL",
        "SHOPIFY_API_KEY", 
        "SHOPIFY_API_SECRET"
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if value:
            # Mask sensitive values
            if "SECRET" in var or "PASSWORD" in var or "TOKEN" in var:
                display_value = f"{value[:10]}..." if len(value) > 10 else "***"
            else:
                display_value = value[:50] + "..." if len(value) > 50 else value
            print(f"✅ {var}: {display_value}")
        else:
            missing_vars.append(var)
            print(f"❌ {var}: Not set")
    
    if missing_vars:
        print(f"\n⚠️  Missing required environment variables: {', '.join(missing_vars)}")
        return False
    else:
        print("\n✅ All required environment variables are set!")
        return True


def main():
    """Main setup function."""
    
    print("🚀 FastAPI Multi-Tenant Authentication Setup")
    print("=" * 50)
    
    # Check if we're in the right directory
    if not Path("main.py").exists():
        print("❌ Error: Please run this script from the backend directory")
        print("   cd backend && python setup_env.py")
        return
    
    # Check existing environment
    env_ok = check_existing_env()
    
    if env_ok:
        print("\n🎉 Environment is already configured!")
        response = input("Do you want to test the authentication system? (Y/n): ")
        if response.lower() != 'n':
            print("\n🧪 Running authentication tests...")
            os.system("python test_auth.py")
    else:
        print("\n🔧 Let's set up your environment...")
        create_env_file()
        
        print("\n🧪 Testing the new configuration...")
        os.system("python test_auth.py")


if __name__ == "__main__":
    main()
